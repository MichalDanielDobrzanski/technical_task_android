plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
}

apply from: '../config.gradle'

ext {
    extractApiKey = {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
        return properties.getProperty("API_KEY")
    }
}

android {
    compileSdk appSetup.compileSdkVersion

    defaultConfig {
        applicationId "com.michal.technicaltask"
        minSdk appSetup.minSdkVersion
        targetSdk appSetup.compileSdkVersion
        versionCode getAppVersionCode()
        versionName getAppVersionName()

        buildConfigField "String", "API_KEY", "${extractApiKey()}"

        testInstrumentationRunner "com.michal.technicaltask.utils.HiltTestRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation project(path: ':time')
    testImplementation project(path: ':time')

    implementation "androidx.core:core-ktx:${versions.core_ktx}"
    implementation "androidx.appcompat:appcompat:${versions.app_compat}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "androidx.constraintlayout:constraintlayout:${versions.constraint_layout}"

    implementation "androidx.navigation:navigation-fragment-ktx:${versions.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.navigation}"

    implementation "io.reactivex.rxjava3:rxjava:${versions.rxjava}"
    implementation "io.reactivex.rxjava3:rxandroid:${versions.rxandroid}"

    implementation "com.google.dagger:hilt-android:${versions.hilt}"
    kapt "com.google.dagger:hilt-compiler:${versions.hilt}"

    implementation "com.squareup.moshi:moshi:${versions.moshi}"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:${versions.moshi}"

    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.retrofit2:adapter-rxjava3:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-scalars:${versions.retrofit}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.http_logging_interceptor}"

    implementation "com.jakewharton.timber:timber:${versions.timber}"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${versions.leak_canary}"

    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${versions.desugaring}"

    // dependencies for local unit tests
    testImplementation "junit:junit:${versions.junit}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "org.mockito:mockito-inline:${versions.mockito_inline}"
    testImplementation "io.mockk:mockk:${versions.mockk}"
    testImplementation "androidx.arch.core:core-testing:${versions.android_core_testing}"
    testImplementation "org.robolectric:robolectric:${versions.robolectric}"

    // hilt testing
    androidTestImplementation "com.google.dagger:hilt-android-testing:${versions.hilt}"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:${versions.hilt}"

    // dependencies for instrumented tests
    debugImplementation "androidx.fragment:fragment-testing:${versions.fragment_testing}"
    androidTestImplementation "androidx.test.ext:junit:${versions.junit_ext}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.espresso}"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:${versions.espresso}"
}